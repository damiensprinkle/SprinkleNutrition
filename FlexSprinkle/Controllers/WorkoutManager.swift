//
//  WorkoutManager.swift
//  FlexSprinkle
//
//  Created by Damien Sprinkle on 2/5/24.
//

import Foundation
import CoreData

class WorkoutManager: ObservableObject {
    var context: NSManagedObjectContext? {
        didSet {
            print("Context set in WorkoutManager")
            if context != nil {
                loadWorkoutsWithId()
                context!.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy
                
            }
        }
    }
    
    @Published var workouts: [WorkoutInfo] = []
    
    
    // MARK: Core Data Operations
    
    //good
    func addWorkoutDetail(workoutTitle: String, exerciseName: String, color: String , isCardio: Bool, orderIndex: Int32, sets: [SetInput]) {
        guard let context = self.context else { return }
        
        let workout = findOrCreateWorkout(withTitle: workoutTitle, color: color)
        
        // Create and configure a new WorkoutDetail instance
        let newExerciseDetail = WorkoutDetail(context: context)
        newExerciseDetail.exerciseId = UUID()
        newExerciseDetail.exerciseName = exerciseName
        newExerciseDetail.isCardio = isCardio
        newExerciseDetail.orderIndex = orderIndex
        
        // Add sets to the exercise detail
        for setInput in sets {
            let newSet = WorkoutSet(context: context)
            newSet.id = UUID()
            newSet.reps = setInput.reps
            newSet.weight = setInput.weight
            newSet.time = setInput.time
            newSet.distance = setInput.distance
            newExerciseDetail.addToSets(newSet) // Assuming there's a relationship method generated by Core Data
        }
        
        workout.addToDetails(newExerciseDetail)
        
        saveContext()
        print("Workout ID: \(String(describing: workout.id)), Exercise Created with ID: \(String(describing: newExerciseDetail.exerciseId))")
    }
    
    func saveOrUpdateSetsDuringActiveWorkout(workoutId: UUID, exerciseId: UUID, exerciseName: String, setsInput: [SetInput], isCardio: Bool, orderIndex: Int32) {
        guard let context = self.context else { return }
        
        // Fetch the Workout entity directly
        let workoutRequest: NSFetchRequest<Workouts> = Workouts.fetchRequest()
        workoutRequest.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        
        do {
            guard let workout = try context.fetch(workoutRequest).first else {
                print("No workout found with ID: \(workoutId)")
                return
            }
            
            // Assuming detailsTemp is actually a Set<TemporaryWorkoutDetail> or similar
            if let tempDetails = workout.detailsTemp as? Set<TemporaryWorkoutDetail> {
                // Check if there's an existing detail for this exercise
                
                let detailToUpdate: TemporaryWorkoutDetail
                if let existingDetail = tempDetails.first(where: { $0.exerciseId == exerciseId }) {
                    context.refresh(existingDetail, mergeChanges: true) // Refresh the object
                    detailToUpdate = existingDetail
                } else {
                    // Create a new TemporaryWorkoutDetail
                    detailToUpdate = TemporaryWorkoutDetail(context: context)
                    detailToUpdate.id = UUID()
                    detailToUpdate.exerciseId = exerciseId
                    detailToUpdate.exerciseName = exerciseName
                    detailToUpdate.isCardio = isCardio
                    detailToUpdate.orderIndex = orderIndex
                    workout.addToDetailsTemp(detailToUpdate) // Correct method name as needed
                }
                
                // Update or add sets to the detail
                updateOrAddSetsForTempDetail(forDetail: detailToUpdate, withSetsInput: setsInput, inContext: context)
                
                if context.hasChanges {
                    try context.save()
                }
            }
        } catch {
            print("Failed to save or update temporary workout details: \(error)")
        }
    }
    
    
    
    private func updateOrAddSetsForTempDetail(forDetail tempDetail: TemporaryWorkoutDetail, withSetsInput setsInput: [SetInput], inContext context: NSManagedObjectContext) {
        let existingSets = tempDetail.sets as? Set<WorkoutSet> ?? Set()
        
        setsInput.forEach { setInput in
            let set: WorkoutSet
            if let existingSet = existingSets.first(where: { $0.id == setInput.id }) {
                set = existingSet
            } else {
                set = WorkoutSet(context: context)
                tempDetail.addToSets(set) // Make sure your TemporaryWorkoutDetail has an addToSets method similar to WorkoutDetail
            }
            
            set.id = setInput.id ?? UUID()
            set.reps = setInput.reps
            set.weight = setInput.weight
            set.time = setInput.time
            set.distance = setInput.distance
            // Update other properties as necessary
        }
    }
    
    func deleteAllTemporaryWorkoutDetails() {
        guard let context = self.context else { return }
        
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = TemporaryWorkoutDetail.fetchRequest()
        
        // Create a batch delete request using the fetch request
        let deleteRequest = NSBatchDeleteRequest(fetchRequest: fetchRequest)
        deleteRequest.resultType = .resultTypeObjectIDs // Specify result type to get the IDs of the deleted objects
        
        do {
            let result = try context.execute(deleteRequest) as? NSBatchDeleteResult
            let objectIDArray = result?.result as? [NSManagedObjectID]
            let changes = [NSDeletedObjectsKey: objectIDArray]
            NSManagedObjectContext.mergeChanges(fromRemoteContextSave: changes as [AnyHashable : Any], into: [context])
            
            // Optionally, you can refresh any UI or fetched results controllers that might be affected by these deletions
            // For example, to refresh all objects in the context to reflect the deletion:
            // context.refreshAllObjects()
            
            context.refreshAllObjects()
        } catch let error as NSError {
            // Handle or log the error
            print("Error deleting all TemporaryWorkoutDetail entities: \(error), \(error.userInfo)")
        }
    }
    
    
    
    
    private func saveContext() {
        guard let context = self.context else { return }
        
        do {
            try context.save()
            loadWorkoutsWithId()
        } catch {
            print("Failed to save context: \(error)")
        }
    }
    
    //good
    private func findOrCreateWorkout(withTitle title: String, color: String) -> Workouts {
        let request = NSFetchRequest<Workouts>(entityName: "Workouts")
        request.predicate = NSPredicate(format: "name == %@", title)
        
        if let existingWorkout = (try? context?.fetch(request))?.first {
            return existingWorkout
        } else {
            let newWorkout = Workouts(context: context!)
            newWorkout.id = UUID()
            newWorkout.name = title
            newWorkout.color = color
            return newWorkout
        }
    }
    
    func fetchWorkoutById(for workoutId: UUID) -> Workouts? {
        guard let context = self.context else {
            return nil
        }
        let request = NSFetchRequest<Workouts>(entityName: "Workouts")
        request.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        do {
            let result = try context.fetch(request)
            return result.first
        } catch {
            print("Error fetching workout by ID: \(error)")
            return nil
        }
    }
    
    
    
    //good?
    func loadWorkoutsWithId() {
        guard let context = self.context else {
            print("Context is nil in loadWorkoutsWithId")
            return
        }
        
        let request = NSFetchRequest<Workouts>(entityName: "Workouts")
        do {
            let results = try context.fetch(request)
            // Assuming WorkoutDetail has a unique id and a name property. Adjust as necessary.
            self.workouts = results.map { WorkoutInfo(id: $0.id!, name: $0.name!) } // Make sure to safely unwrap optionals as needed
            
            // Log each loaded workout for more insights
            for workout in self.workouts {
                print("Workout ID: \(workout.id), Name: \(workout.name)")
                
            }
            
            print("Total Loaded workouts: \(self.workouts.count)")
        } catch {
            print("Failed to fetch workouts: \(error)")
        }
    }
    
    
    func deleteWorkout(for workoutId: UUID) {
        guard let context = self.context else { return }
        
        let fetchRequest: NSFetchRequest<NSFetchRequestResult> = NSFetchRequest(entityName: "Workouts")
        fetchRequest.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        
        do {
            let workoutsToDelete = try context.fetch(fetchRequest) as? [Workouts] ?? []
            
            for workout in workoutsToDelete {
                context.delete(workout)
            }
            
            try context.save()
            print("Workout and its details deleted successfully")
        } catch let error as NSError {
            print("Error deleting workout: \(error), \(error.userInfo)")
        }
    }
    
    func updateWorkoutTitle(workoutId: UUID, to newTitle: String) {
        guard let context = self.context else { return }
        
        // Fetch WorkoutDetail by ID
        let request = NSFetchRequest<Workouts>(entityName: "Workouts")
        request.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        do {
            let results = try context.fetch(request)
            results.forEach { detail in
                detail.name = newTitle
            }
            
            try context.save()
            
            // Update the local workouts array
            if let index = workouts.firstIndex(where: { $0.id == workoutId }) {
                workouts[index].name = newTitle
            }
            
            // Notify observers of the change
            objectWillChange.send()
        } catch {
            print("Error updating workout title: \(error)")
        }
    }
    
    
    
    func updateWorkoutDetails(workoutId: UUID, workoutDetailsInput: [WorkoutDetailInput]) {
        guard let context = self.context, let workout = fetchWorkoutById(for: workoutId) else {
            print("Failed to fetch or context is nil for workout ID \(workoutId)")
            return
        }
        
        let existingDetails = workout.details as? Set<WorkoutDetail> ?? Set()
        let existingDetailsMap = existingDetails.reduce(into: [UUID: WorkoutDetail]()) { result, detail in
            if let exerciseId = detail.exerciseId {
                result[exerciseId] = detail
            }
        }
        
        workoutDetailsInput.forEach { inputDetail in
            let detail: WorkoutDetail
            if let exerciseId = inputDetail.exerciseId, let existingDetail = existingDetailsMap[exerciseId] {
                detail = existingDetail
            } else {
                detail = WorkoutDetail(context: context)
                workout.addToDetails(detail)
                detail.exerciseId = inputDetail.exerciseId ?? UUID()
            }
            
            detail.exerciseName = inputDetail.exerciseName
            detail.isCardio = inputDetail.isCardio
            detail.orderIndex = inputDetail.orderIndex
            updateOrAddSets(forDetail: detail, withSetsInput: inputDetail.sets, inContext: context)
        }
        
        existingDetails.forEach { existingDetail in
            if !workoutDetailsInput.contains(where: { $0.exerciseId == existingDetail.exerciseId }) {
                existingDetail.sets?.forEach { context.delete($0 as! NSManagedObject) }
                context.delete(existingDetail)
            }
        }
        
        do {
            try context.save()
        } catch {
            print("Error saving context after updating workout details: \(error)")
        }
    }
    
    
    
    
    
    private func updateOrAddSets(forDetail detail: WorkoutDetail, withSetsInput setsInput: [SetInput], inContext context: NSManagedObjectContext) {
        let existingSets = detail.sets as? Set<WorkoutSet> ?? Set()
        
        setsInput.forEach { setInput in
            let set: WorkoutSet
            if let existingSet = existingSets.first(where: { $0.id == setInput.id }) {
                set = existingSet
            } else {
                set = WorkoutSet(context: context)
                detail.addToSets(set)
            }
            
            set.id = setInput.id ?? UUID()
            set.reps = setInput.reps
            set.weight = setInput.weight
            set.time = setInput.time
            set.distance = setInput.distance
            // Update other properties as necessary
        }
        
        // Remove sets not in the input
        existingSets.forEach { existingSet in
            if !setsInput.contains(where: { $0.id == existingSet.id }) {
                context.delete(existingSet)
            }
        }
    }
}



extension WorkoutManager {
    
    func titleExists(_ title: String) -> Bool {
        guard let context = self.context else { return false }
        
        let request = NSFetchRequest<NSFetchRequestResult>(entityName: "Workouts")
        // Update predicate to compare names case-insensitively
        request.predicate = NSPredicate(format: "name ==[c] %@", title)
        request.includesSubentities = false
        
        do {
            let count = try context.count(for: request)
            return count > 0
        } catch {
            print("Error checking title existence: \(error)")
            return false
        }
    }
    
    // Checks if there are any active sessions
    func getSessions() -> [WorkoutSession] {
        guard let context = self.context else { return [] }
        let request = NSFetchRequest<WorkoutSession>(entityName: "WorkoutSession")
        request.predicate = NSPredicate(format: "isActive == %@", NSNumber(value: true))
        
        do {
            return try context.fetch(request)
        } catch {
            print("Error fetching active sessions: \(error)")
            return []
        }
    }
    
    func getWorkoutIdOfActiveSession() -> UUID? {
        guard let context = self.context else { return nil }
        let request = NSFetchRequest<WorkoutSession>(entityName: "WorkoutSession")
        
        request.predicate = NSPredicate(format: "isActive == %@", NSNumber(value: true))
        
        do {
            // Fetch the active session
            if let activeSession = try context.fetch(request).first {
                // Directly access the related workout entity to fetch the workout ID
                return activeSession.workoutsR?.id
            }
        } catch {
            print("Error fetching active sessions: \(error)")
        }
        
        return nil
    }
    
    func loadTemporaryWorkoutData(for workoutId: UUID) -> [WorkoutDetailInput] {
        guard let context = self.context else { return [] }
        
        // Adjust the fetch request to directly access TemporaryWorkoutDetail entities associated with the workoutId
        let workoutRequest: NSFetchRequest<Workouts> = Workouts.fetchRequest()
        workoutRequest.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        
        do {
            // Fetch the workout with the given ID
            guard let workout = try context.fetch(workoutRequest).first else {
                print("No workout found with ID: \(workoutId)")
                return []
            }
            
            // Assuming detailsTemp is a Set<TemporaryWorkoutDetail> or similar based on updated model structure
            if let tempDetails = workout.detailsTemp as? Set<TemporaryWorkoutDetail> {
                return tempDetails.sorted(by: { $0.orderIndex < $1.orderIndex }).map { tempDetail in
                    let sets = tempDetail.sets?.allObjects as? [WorkoutSet] ?? []
                    return WorkoutDetailInput(
                        id: tempDetail.id,
                        exerciseId: tempDetail.exerciseId,
                        exerciseName: tempDetail.exerciseName ?? "",
                        isCardio: tempDetail.isCardio,
                        orderIndex: tempDetail.orderIndex,
                        sets: sets.map { SetInput(id: $0.id, reps: $0.reps, weight: $0.weight, time: $0.time, distance: $0.distance) }
                    )
                }
            }
        } catch {
            print("Failed to load temporary workout data: \(error)")
        }
        
        return []
    }
    
    func saveWorkoutHistory(workoutId: UUID, dateCompleted: Date, totalWeightLifted: Int32, repsCompleted: Int32, workoutTimeToComplete: String, totalCardioTime: String) {
        guard let context = self.context else { return }
        guard let workout = fetchWorkoutById(for: workoutId) else { return }
        
        let history = WorkoutHistory(context: context)
        history.id = UUID()
        history.workoutDate = dateCompleted
        history.totalWeightLifted = totalWeightLifted
        history.repsCompleted = repsCompleted
        history.workoutTimeToComplete = workoutTimeToComplete
        history.timeDoingCardio = totalCardioTime
        history.workoutR = workout
        
        do {
            try context.save()
        } catch {
            print("Failed to save workout history: \(error)")
        }
    }
    
    func fetchLatestWorkoutHistory(for workoutId: UUID) -> WorkoutHistory? {
        guard let context = self.context else { return nil }
        
        let fetchRequest: NSFetchRequest<WorkoutHistory> = WorkoutHistory.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "workoutR.id == %@", workoutId as CVarArg)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: "workoutDate", ascending: false)]
        fetchRequest.fetchLimit = 1
        
        do {
            let histories = try context.fetch(fetchRequest)
            return histories.first
        } catch {
            print("Failed to fetch latest workout history: \(error)")
            return nil
        }
    }
    
    func setSessionStatus(workoutId: UUID, isActive: Bool) {
        guard let context = self.context else { return }
        
        let workoutRequest = NSFetchRequest<Workouts>(entityName: "Workouts")
        workoutRequest.predicate = NSPredicate(format: "id == %@", workoutId as CVarArg)
        
        do {
            if let workout = try context.fetch(workoutRequest).first {
                context.refresh(workout, mergeChanges: true)
                if isActive {
                    // Starting a new session
                    let newSession = WorkoutSession(context: context)
                    newSession.id = UUID()
                    newSession.workoutsR = workout // Link the session to the workout
                    newSession.startTime = Date()
                    newSession.isActive = true
                    workout.sessions = newSession // Ensure the workout points to this new session
                } else {
                    // Ending the existing session associated with the workout
                    if let existingSession = workout.sessions, existingSession.isActive {
                        existingSession.isActive = false
                        existingSession.endTime = Date()
                    }
                }
                
                try context.save()
            }
        } catch {
            // Handle errors
            print("Error setting session status: \(error)")
        }
    }
    
    
}
